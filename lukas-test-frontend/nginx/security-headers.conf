# Use https://securityheaders.com/ to test security headers

# Enforce the use of HTTPS
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
add_header Strict-Transport-Security "max-age=31449600; includeSubDomains" always;

# Enable strict content security policy to avoid XSS and data injection attacks
# https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP
set $CSP_default_src "default-src 'self'";
set $CSP "${CSP_default_src}";

add_header Content-Security-Policy $CSP always;

# Prevent a browser from allowing this site to be used as an frame. This avoids click-jacking attacks.
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
add_header X-Frame-Options "DENY" always;

# Stop a browser from trying to MIME-sniff the content type and force it to stick with the declared content-type
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
add_header X-Content-Type-Options "nosniff" always;

# Include referrer information for same-origin requests
# For cross-origin requests send the origin only when the protocol security level stays same (HTTPSâ†’HTTPS)
# https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Referrer-Policy
add_header Referrer-Policy "strict-origin-when-cross-origin" always;

# Deny the use of certain browser features
# Currently there is no way to set a reasonable default value without explicitly defining each permission, see https://github.com/w3c/webappsec-permissions-policy/issues/189
# Therefore a minimum set of permissions is denied
# TODO(CWDEV-194): Disable browser features by default in a reasonable way
# https://www.permissionspolicy.com/
set $PP "camera=(), geolocation=(), microphone=()";
add_header Permissions-Policy $PP always;
